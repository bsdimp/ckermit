COMPILING KERMIT

The Kermit objects on this disk have been compiled with the Lattice 3.10
C compiler using the -b and -r options, and linked with BLink using the
SMALLCODE and SMALLDATA options.  This reduces the executable size by
25K when compared to 3.03.  When compiling for Lattice 3.10, define the
preprocessor symbol LAT310 with -DLAT310.  The 3.10 executable is
currently about 92000 bytes without debug logging.

Three files are provided for compiling Kermit on the Amiga.  CKIMAK.MAK
contains a sample makefile for 3.10.  Since many Amiga users do not have
a version of Make, an execute script to compile Kermit is in CKIKER.MAK,
which is set up for the 3.03 compiler.  CKIKER.LNK contains the linker
WITH file for linking Kermit.  If you are using developer's version of
the Lattice compiler distributed by Commodore/Amiga, you may need to
modify the CKIKER.LNK to include LIB:LSTARTUP.OBJ instead of LIB:C.O.

To compile Amiga Kermit with CKIKER.MAK, you must first make the following
logical assigns:
   ASSIGN lc: <directory containing LC1, LC2, and (A|B)LINK commands>
   ASSIGN include: <directory include directories are rooted at>
   ASSIGN lib: <directory containing LC.LIB, AMIGA.LIB, and C.O>
Since CKIKER.MAK takes a parameter, you must have a directory :T for
EXECUTE to create the instantiated version in.  To compile Kermit normally,
change the current directory to the directory containing the C source files
and enter
   EXECUTE CKIKER.MAK
For Lattice 3.10, this can be modified to
   EXECUTE CKIKER.MAK "-DLAT310"
To create a version of Kermit with debug and transaction logging available,
enter:
   EXECUTE CKIKER.MAK "-DDEBUG -DTLOG"
Compilation will produce a fairly large number of lint-style warning
messages, usually about potentially uninitialized auto variables.  These
cannot be turned off but they can be ignored.

On a two disk system, Kermit takes 35 minutes to compile.  I generally work
with a boot disk containing the include files, library files, both passes
of the compiler, and the linker.  Any libraries, commands, and other files
unnecessary for development using CLI only are of course stripped.  If you
have a single disk system, you will probably need to modify the CKIKER.MAK
script to reduce disk swapping.
